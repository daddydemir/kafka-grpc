// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.13.0
// source: proto/image_analyze.proto

package proto

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData []byte `protobuf:"bytes,1,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

type ImageDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *ImageDetailRequest) Reset() {
	*x = ImageDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDetailRequest) ProtoMessage() {}

func (x *ImageDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDetailRequest.ProtoReflect.Descriptor instead.
func (*ImageDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{1}
}

func (x *ImageDetailRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type ImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId      string  `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Joy          int32   `protobuf:"varint,2,opt,name=joy,proto3" json:"joy,omitempty"`
	Sorrow       int32   `protobuf:"varint,3,opt,name=sorrow,proto3" json:"sorrow,omitempty"`
	Anger        int32   `protobuf:"varint,4,opt,name=anger,proto3" json:"anger,omitempty"`
	Surprise     int32   `protobuf:"varint,5,opt,name=surprise,proto3" json:"surprise,omitempty"`
	UnderExposed int32   `protobuf:"varint,6,opt,name=under_exposed,json=underExposed,proto3" json:"under_exposed,omitempty"`
	Blurred      int32   `protobuf:"varint,7,opt,name=blurred,proto3" json:"blurred,omitempty"`
	Headwear     int32   `protobuf:"varint,8,opt,name=headwear,proto3" json:"headwear,omitempty"`
	Confidence   float32 `protobuf:"fixed32,9,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *ImageRequest) Reset() {
	*x = ImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRequest) ProtoMessage() {}

func (x *ImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRequest.ProtoReflect.Descriptor instead.
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{2}
}

func (x *ImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageRequest) GetJoy() int32 {
	if x != nil {
		return x.Joy
	}
	return 0
}

func (x *ImageRequest) GetSorrow() int32 {
	if x != nil {
		return x.Sorrow
	}
	return 0
}

func (x *ImageRequest) GetAnger() int32 {
	if x != nil {
		return x.Anger
	}
	return 0
}

func (x *ImageRequest) GetSurprise() int32 {
	if x != nil {
		return x.Surprise
	}
	return 0
}

func (x *ImageRequest) GetUnderExposed() int32 {
	if x != nil {
		return x.UnderExposed
	}
	return 0
}

func (x *ImageRequest) GetBlurred() int32 {
	if x != nil {
		return x.Blurred
	}
	return 0
}

func (x *ImageRequest) GetHeadwear() int32 {
	if x != nil {
		return x.Headwear
	}
	return 0
}

func (x *ImageRequest) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{3}
}

func (x *PaginationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId      string               `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Joy          int32                `protobuf:"varint,2,opt,name=joy,proto3" json:"joy,omitempty"`
	Sorrow       int32                `protobuf:"varint,3,opt,name=sorrow,proto3" json:"sorrow,omitempty"`
	Anger        int32                `protobuf:"varint,4,opt,name=anger,proto3" json:"anger,omitempty"`
	Surprise     int32                `protobuf:"varint,5,opt,name=surprise,proto3" json:"surprise,omitempty"`
	UnderExposed int32                `protobuf:"varint,6,opt,name=under_exposed,json=underExposed,proto3" json:"under_exposed,omitempty"`
	Blurred      int32                `protobuf:"varint,7,opt,name=blurred,proto3" json:"blurred,omitempty"`
	Headwear     int32                `protobuf:"varint,8,opt,name=headwear,proto3" json:"headwear,omitempty"`
	Confidence   float32              `protobuf:"fixed32,9,opt,name=confidence,proto3" json:"confidence,omitempty"`
	CreateDate   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	UpdateDate   *timestamp.Timestamp `protobuf:"bytes,11,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{5}
}

func (x *ImageResponse) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageResponse) GetJoy() int32 {
	if x != nil {
		return x.Joy
	}
	return 0
}

func (x *ImageResponse) GetSorrow() int32 {
	if x != nil {
		return x.Sorrow
	}
	return 0
}

func (x *ImageResponse) GetAnger() int32 {
	if x != nil {
		return x.Anger
	}
	return 0
}

func (x *ImageResponse) GetSurprise() int32 {
	if x != nil {
		return x.Surprise
	}
	return 0
}

func (x *ImageResponse) GetUnderExposed() int32 {
	if x != nil {
		return x.UnderExposed
	}
	return 0
}

func (x *ImageResponse) GetBlurred() int32 {
	if x != nil {
		return x.Blurred
	}
	return 0
}

func (x *ImageResponse) GetHeadwear() int32 {
	if x != nil {
		return x.Headwear
	}
	return 0
}

func (x *ImageResponse) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *ImageResponse) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *ImageResponse) GetUpdateDate() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

type Images struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*ImageResponse `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *Images) Reset() {
	*x = Images{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_image_analyze_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Images) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Images) ProtoMessage() {}

func (x *Images) ProtoReflect() protoreflect.Message {
	mi := &file_proto_image_analyze_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Images.ProtoReflect.Descriptor instead.
func (*Images) Descriptor() ([]byte, []int) {
	return file_proto_image_analyze_proto_rawDescGZIP(), []int{6}
}

func (x *Images) GetImages() []*ImageResponse {
	if x != nil {
		return x.Images
	}
	return nil
}

var File_proto_image_analyze_proto protoreflect.FileDescriptor

var file_proto_image_analyze_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a,
	0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x80,
	0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6a, 0x6f, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x75, 0x72, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c,
	0x75, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3d, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6a, 0x6f, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x75, 0x72, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c, 0x75, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x32, 0x84, 0x02, 0x0a,
	0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_image_analyze_proto_rawDescOnce sync.Once
	file_proto_image_analyze_proto_rawDescData = file_proto_image_analyze_proto_rawDesc
)

func file_proto_image_analyze_proto_rawDescGZIP() []byte {
	file_proto_image_analyze_proto_rawDescOnce.Do(func() {
		file_proto_image_analyze_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_image_analyze_proto_rawDescData)
	})
	return file_proto_image_analyze_proto_rawDescData
}

var file_proto_image_analyze_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_image_analyze_proto_goTypes = []interface{}{
	(*Request)(nil),             // 0: proto.Request
	(*ImageDetailRequest)(nil),  // 1: proto.ImageDetailRequest
	(*ImageRequest)(nil),        // 2: proto.ImageRequest
	(*PaginationRequest)(nil),   // 3: proto.PaginationRequest
	(*Response)(nil),            // 4: proto.Response
	(*ImageResponse)(nil),       // 5: proto.ImageResponse
	(*Images)(nil),              // 6: proto.Images
	(*timestamp.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_proto_image_analyze_proto_depIdxs = []int32{
	7, // 0: proto.ImageResponse.create_date:type_name -> google.protobuf.Timestamp
	7, // 1: proto.ImageResponse.update_date:type_name -> google.protobuf.Timestamp
	5, // 2: proto.Images.images:type_name -> proto.ImageResponse
	0, // 3: proto.ImageAnalyzeService.UploadImage:input_type -> proto.Request
	1, // 4: proto.ImageAnalyzeService.GetImageDetail:input_type -> proto.ImageDetailRequest
	2, // 5: proto.ImageAnalyzeService.UpdateImageDetail:input_type -> proto.ImageRequest
	3, // 6: proto.ImageAnalyzeService.GetImageFeed:input_type -> proto.PaginationRequest
	4, // 7: proto.ImageAnalyzeService.UploadImage:output_type -> proto.Response
	5, // 8: proto.ImageAnalyzeService.GetImageDetail:output_type -> proto.ImageResponse
	4, // 9: proto.ImageAnalyzeService.UpdateImageDetail:output_type -> proto.Response
	6, // 10: proto.ImageAnalyzeService.GetImageFeed:output_type -> proto.Images
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_image_analyze_proto_init() }
func file_proto_image_analyze_proto_init() {
	if File_proto_image_analyze_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_image_analyze_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_image_analyze_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Images); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_image_analyze_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_image_analyze_proto_goTypes,
		DependencyIndexes: file_proto_image_analyze_proto_depIdxs,
		MessageInfos:      file_proto_image_analyze_proto_msgTypes,
	}.Build()
	File_proto_image_analyze_proto = out.File
	file_proto_image_analyze_proto_rawDesc = nil
	file_proto_image_analyze_proto_goTypes = nil
	file_proto_image_analyze_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImageAnalyzeServiceClient is the client API for ImageAnalyzeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageAnalyzeServiceClient interface {
	UploadImage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetImageDetail(ctx context.Context, in *ImageDetailRequest, opts ...grpc.CallOption) (*ImageResponse, error)
	UpdateImageDetail(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Response, error)
	GetImageFeed(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*Images, error)
}

type imageAnalyzeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageAnalyzeServiceClient(cc grpc.ClientConnInterface) ImageAnalyzeServiceClient {
	return &imageAnalyzeServiceClient{cc}
}

func (c *imageAnalyzeServiceClient) UploadImage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ImageAnalyzeService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageAnalyzeServiceClient) GetImageDetail(ctx context.Context, in *ImageDetailRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/proto.ImageAnalyzeService/GetImageDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageAnalyzeServiceClient) UpdateImageDetail(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.ImageAnalyzeService/UpdateImageDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageAnalyzeServiceClient) GetImageFeed(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*Images, error) {
	out := new(Images)
	err := c.cc.Invoke(ctx, "/proto.ImageAnalyzeService/GetImageFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageAnalyzeServiceServer is the server API for ImageAnalyzeService service.
type ImageAnalyzeServiceServer interface {
	UploadImage(context.Context, *Request) (*Response, error)
	GetImageDetail(context.Context, *ImageDetailRequest) (*ImageResponse, error)
	UpdateImageDetail(context.Context, *ImageRequest) (*Response, error)
	GetImageFeed(context.Context, *PaginationRequest) (*Images, error)
}

// UnimplementedImageAnalyzeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImageAnalyzeServiceServer struct {
}

func (*UnimplementedImageAnalyzeServiceServer) UploadImage(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedImageAnalyzeServiceServer) GetImageDetail(context.Context, *ImageDetailRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageDetail not implemented")
}
func (*UnimplementedImageAnalyzeServiceServer) UpdateImageDetail(context.Context, *ImageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageDetail not implemented")
}
func (*UnimplementedImageAnalyzeServiceServer) GetImageFeed(context.Context, *PaginationRequest) (*Images, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageFeed not implemented")
}

func RegisterImageAnalyzeServiceServer(s *grpc.Server, srv ImageAnalyzeServiceServer) {
	s.RegisterService(&_ImageAnalyzeService_serviceDesc, srv)
}

func _ImageAnalyzeService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAnalyzeServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImageAnalyzeService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAnalyzeServiceServer).UploadImage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageAnalyzeService_GetImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAnalyzeServiceServer).GetImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImageAnalyzeService/GetImageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAnalyzeServiceServer).GetImageDetail(ctx, req.(*ImageDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageAnalyzeService_UpdateImageDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAnalyzeServiceServer).UpdateImageDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImageAnalyzeService/UpdateImageDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAnalyzeServiceServer).UpdateImageDetail(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageAnalyzeService_GetImageFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAnalyzeServiceServer).GetImageFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImageAnalyzeService/GetImageFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAnalyzeServiceServer).GetImageFeed(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageAnalyzeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImageAnalyzeService",
	HandlerType: (*ImageAnalyzeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageAnalyzeService_UploadImage_Handler,
		},
		{
			MethodName: "GetImageDetail",
			Handler:    _ImageAnalyzeService_GetImageDetail_Handler,
		},
		{
			MethodName: "UpdateImageDetail",
			Handler:    _ImageAnalyzeService_UpdateImageDetail_Handler,
		},
		{
			MethodName: "GetImageFeed",
			Handler:    _ImageAnalyzeService_GetImageFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image_analyze.proto",
}
